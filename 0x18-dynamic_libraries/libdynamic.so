#include <stdio.h>
#include <ctype.h>
#include <string.h>

/* Function prototypes for functions not declared in standard C headers */
int _abs(int n);
size_t _strlen(const char *s);
char *_strcpy(char *dest, const char *src);
int _atoi(const char *s);
char *_strcat(char *dest, const char *src);
char *_strncat(char *dest, const char *src, size_t n);
char *_strncpy(char *dest, const char *src, size_t n);
int _strcmp(const char *s1, const char *s2);
char *_memset(char *s, char b, size_t n);
char *_memcpy(char *dest, const char *src, size_t n);
char *_strchr(const char *s, int c);
size_t _strspn(const char *s, const char *accept);
char *_strpbrk(const char *s, const char *accept);
char *_strstr(const char *haystack, const char *needle);

/* Custom implementations for functions without standard C headers */
int _putchar(char c) {
    return putchar(c);
}

int _islower(int c) {
    return islower(c);
}

int _isalpha(int c) {
    return isalpha(c);
}

int _abs(int n) {
    return n < 0 ? -n : n; // Handle negative numbers
}

int _isupper(int c) {
    return isupper(c);
}

int _isdigit(int c) {
    return isdigit(c);
}

/* Implementations using standard C library functions */
size_t _strlen(const char *s) {
    return strlen(s);
}

char *_strcpy(char *dest, const char *src) {
    return strcpy(dest, src);
}

int _atoi(const char *s) {
    return atoi(s);
}

char *_strcat(char *dest, const char *src) {
    return strcat(dest, src);
}

char *_strncat(char *dest, const char *src, size_t n) {
    return strncat(dest, src, n);
}

char *_strncpy(char *dest, const char *src, size_t n) {
    return strncpy(dest, src, n);
}

int _strcmp(const char *s1, const char *s2) {
    return strcmp(s1, s2);
}

char *_memset(char *s, char b, size_t n) {
    return memset(s, b, n);
}

char *_memcpy(char *dest, const char *src, size_t n) {
    return memcpy(dest, src, n);
}

char *_strchr(const char *s, int c) {
    return strchr(s, c);
}

size_t _strspn(const char *s, const char *accept) {
    return strspn(s, accept);
}

char *_strpbrk(const char *s, const char *accept) {
    return strpbrk(s, accept);
}

char *_strstr(const char *haystack, const char *needle) {
    return strstr(haystack, needle);
}

/* 
   Compile this code as follows to create the dynamic library:
   gcc -shared -fPIC -o libdynamic.so dynamic_functions.c
*/
